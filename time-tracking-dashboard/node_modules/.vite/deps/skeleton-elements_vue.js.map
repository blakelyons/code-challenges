{
  "version": 3,
  "sources": ["../../skeleton-elements/vue/SkeletonBlock.js", "../../skeleton-elements/vue/SkeletonText.js", "../../skeleton-elements/utils/multiply-svg-points.js", "../../skeleton-elements/vue/SkeletonImage.js", "../../skeleton-elements/vue/SkeletonAvatar.js"],
  "sourcesContent": ["import { h } from 'vue';\nexport default {\n  name: 'skeleton-block',\n  props: {\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    width: [String, Number],\n    height: [String, Number],\n    borderRadius: String,\n    effect: String\n  },\n\n  render() {\n    return h(this.tag, {\n      class: {\n        'skeleton-block': true,\n        [`skeleton-effect-${this.effect}`]: this.effect\n      },\n      style: {\n        width: this.width,\n        height: this.height,\n        borderRadius: this.borderRadius\n      }\n    }, this.$slots.default && this.$slots.default());\n  }\n\n};", "import { h } from 'vue';\nexport default {\n  name: 'skeleton-text',\n  props: {\n    tag: {\n      type: String,\n      default: 'span'\n    },\n    effect: String\n  },\n\n  render() {\n    return h(this.tag, {\n      class: {\n        'skeleton-text': true,\n        [`skeleton-effect-${this.effect}`]: this.effect\n      }\n    }, this.$slots.default && this.$slots.default());\n  }\n\n};", "function multiplySvgPoints(pointsString, iconSize, width, height) {\n  const iconMaxSize = Math.min(width, height) * 0.5;\n  const scale = iconMaxSize / iconSize;\n  // eslint-disable-next-line\n  return pointsString.replace(/([0-9,\\.]{1,})/g, (coords) => {\n    // eslint-disable-next-line\n    coords = coords.split(',').map((p) => parseFloat(p));\n    const x = coords[0] * scale + width / 2 - (iconSize * scale) / 2;\n    const y = coords[1] * scale + height / 2 - (iconSize * scale) / 2;\n    if (iconMaxSize >= 100) {\n      return `${Math.round(x)},${Math.round(y)}`;\n    }\n    return `${x},${y}`;\n  });\n}\n\nexport default multiplySvgPoints;\n", "import { h } from 'vue';\nimport multiplySvgPoints from '../utils/multiply-svg-points.js';\nexport default {\n  name: 'skeleton-image',\n  props: {\n    tag: {\n      type: String,\n      default: 'span'\n    },\n    width: {\n      type: Number,\n      default: 1200\n    },\n    height: {\n      type: Number,\n      default: 600\n    },\n    color: String,\n    iconColor: String,\n    showIcon: {\n      type: Boolean,\n      default: true\n    },\n    effect: String,\n    borderRadius: String\n  },\n\n  render() {\n    const {\n      tag,\n      color,\n      iconColor,\n      showIcon,\n      width,\n      height,\n      effect,\n      borderRadius\n    } = this;\n    return h(tag, {\n      class: {\n        'skeleton-image': true,\n        [`skeleton-effect-${effect}`]: effect\n      }\n    }, [h('svg', {\n      xmlns: 'http://www.w3.org/2000/svg',\n      width,\n      height,\n      viewBox: `0 0 ${width} ${height}`,\n      style: {\n        borderRadius\n      },\n      preserveAspectRatio: 'none'\n    }, [h('polygon', {\n      style: {\n        fill: color\n      },\n      fillRule: 'evenodd',\n      points: `0 0 ${width} 0 ${width} ${height} 0 ${height}`\n    }), showIcon && h('path', {\n      style: {\n        fill: iconColor\n      },\n      d: multiplySvgPoints('M7.7148,49.5742 L48.2852,49.5742 C53.1836,49.5742 55.6446,47.1367 55.6446,42.3086 L55.6446,13.6914 C55.6446,8.8633 53.1836,6.4258 48.2852,6.4258 L7.7148,6.4258 C2.8398,6.4258 0.3554,8.8398 0.3554,13.6914 L0.3554,42.3086 C0.3554,47.1602 2.8398,49.5742 7.7148,49.5742 Z M39.2851,27.9414 C38.2304,27.0039 37.0351,26.5118 35.7695,26.5118 C34.457,26.5118 33.3085,26.9571 32.2304,27.918 L21.6366,37.3867 L17.3007,33.4492 C16.3163,32.582 15.2617,32.1133 14.1366,32.1133 C13.1054,32.1133 12.0976,32.5586 11.1366,33.4258 L4.1288,39.7305 L4.1288,13.8789 C4.1288,11.4414 5.4413,10.1992 7.7851,10.1992 L48.2147,10.1992 C50.535,10.1992 51.8708,11.4414 51.8708,13.8789 L51.8708,39.7539 L39.2851,27.9414 Z M17.8163,28.1992 C20.8398,28.1992 23.3241,25.7149 23.3241,22.668 C23.3241,19.6445 20.8398,17.1367 17.8163,17.1367 C14.7695,17.1367 12.2851,19.6445 12.2851,22.668 C12.2851,25.7149 14.7695,28.1992 17.8163,28.1992 Z', 56, width, height)\n    })]), this.$slots.default && this.$slots.default()]);\n  }\n\n};", "import { h } from 'vue';\nimport multiplySvgPoints from '../utils/multiply-svg-points.js';\nexport default {\n  name: 'skeleton-avatar',\n  props: {\n    tag: {\n      type: String,\n      default: 'span'\n    },\n    size: {\n      type: Number,\n      default: 48\n    },\n    borderRadius: {\n      type: [String, Number],\n      default: '50%'\n    },\n    color: String,\n    iconColor: String,\n    showIcon: {\n      type: Boolean,\n      default: true\n    },\n    effect: String\n  },\n\n  render() {\n    const {\n      tag,\n      color,\n      iconColor,\n      showIcon,\n      size,\n      borderRadius,\n      effect\n    } = this;\n    return h(tag, {\n      class: {\n        'skeleton-avatar': true,\n        [`skeleton-effect-${effect}`]: effect\n      }\n    }, [h('svg', {\n      xmlns: 'http://www.w3.org/2000/svg',\n      width: size,\n      height: size,\n      viewBox: `0 0 ${size} ${size}`,\n      preserveAspectRatio: 'none'\n    }, [h('rect', {\n      style: {\n        fill: color\n      },\n      fillRule: 'evenodd',\n      width: size,\n      height: size,\n      rx: borderRadius\n    }), showIcon && h('path', {\n      style: {\n        fill: iconColor\n      },\n      d: multiplySvgPoints('M28.22461,27.1590817 C34.9209931,27.1590817 40.6829044,21.1791004 40.6829044,13.3926332 C40.6829044,5.69958662 34.8898972,0 28.22461,0 C21.5594557,0 15.7663156,5.82423601 15.7663156,13.4549579 C15.7663156,21.1791004 21.5594557,27.1590817 28.22461,27.1590817 Z M8.66515427,56 L47.7841986,56 C52.6739629,56 54.4181241,54.5984253 54.4181241,51.8576005 C54.4181241,43.8219674 44.358068,32.7341519 28.22461,32.7341519 C12.0600561,32.7341519 2,43.8219674 2,51.8576005 C2,54.5984253 3.74402832,56 8.66515427,56 Z', 56, size, size)\n    })]), this.$slots.default && this.$slots.default()]);\n  }\n\n};"],
  "mappings": "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",
  "names": []
}
